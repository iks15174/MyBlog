version: '3'
services:

  zookeepr:
    container_name: local-zookeeper
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - '2181:2181'
    networks:
      - kafka_consumer
  
  kafka:
    container_name: local-kafka
    image: wurstmeister/kafka:2.12-2.3.0
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ADVERTISED_TOPICS: "search:1:1" #토픽:파티션수:레플리카수
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - kafka-volume:/var/run/docker.sock
    networks:
      - kafka_consumer
      - kafka_producer

  db:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_DATABASE: 'myblog'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3308:3306'
    networks:
      - backdb
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "--password=password"]
      timeout: 20s
      retries: 10
  
  back1:
    build: 
      context: ./backend
      args:
        APPLI_CONFIG: back1
    container_name: backend1
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    networks: 
      - frontback
      - backdb
      - kafka_producer
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  back2:
    build: 
      context: ./backend
      args:
        APPLI_CONFIG: back2
    container_name: backend2
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8081:8081
    networks: 
      - frontback
      - backdb
      - kafka_producer
    healthcheck:
      test: "curl --fail --silent localhost:8081/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 40s

  consumer:
    build: 
      context: ./search_consumer
    container_name: consumer

  front:
    build: ./frontend
    container_name: frontend
    depends_on:
      back1:
        condition: service_healthy
      back2:
        condition: service_healthy
    ports:
      - 80:80
    networks: 
      - kafka_consumer
      - search
  
networks: 
  backdb:
    driver: bridge
  frontback:
    driver: bridge
  kafka_producer:
    driver: bridge
  kafka_consumer:
    driver: bridge
  search:
    driver: bridge

volumes:
  kafka-volume: